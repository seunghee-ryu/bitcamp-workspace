//변수의 종류

package com.eomcs.basic.ex04;

public class Exam0400 {
  public static void main(String[] args) {
    //정수
    byte b;
    short s;
    int i;
    long l;
    
    //부동소수점
    float f;
    double d;
    
    //문자
    char c;
    
    //논리
    boolean bool;
    
    //레퍼런스
    String str;
    
    //변수의 메모리 크기
    //정수 리터럴은 기본이 4바이트이다
    //원래 작은 메모리에 저장할 수 없지만
    //오른쪽의 값이 4바이트 정수 리터럴일 경우
    //메모리에 그 리터럴을 저장할 수 있다면 허락한다.
    //원래는 4바이트를 1바이트에 저장이 안되는데 리터럴일 경우 값이 들어갈 수 있다면 허락한다.
    //1바이트는 -128~127까지 저장 가능하기 때문에 오른쪽 값이 -128~127 이내의 정수 리터럴이라면
    //1바이트 안에 담을 수 있다
    // _ _ _ _ _ _ _ _ <=1바이트 8비트
    // 4바이트 리터럴 1
    // 00000000 00000000 00000000 00000001
    // 앞의 00000000 3개는 날려버리고 0000 0001만 넣음
    //참조 : https://opentutorials.org/course/1223/5375
    b = -128;
    b = 127;
    
    //1000 0001 = 129 (맨 앞이 부호라서 0이어야 양수)
    //0000 0000 0000 0000 0000 0000 1000 0001 (129)
    //1111 1111 1111 1111 1111 1111 0111 1110
    //                                      1+
    //1111 1111 1111 1111 1111 1111 0111 1111 (-129)
    
    //b = -129;
    //b = 128;
    
    //4바이트 리터럴 끼리의 연산 결과는 리터럴로 취급한다.
    b = 20 + 30;
    
    b = 120 + 7;
    //b = 120 + 8;
    b = 20 * 3;
    //b = 20 * 30;
    
    byte b2 = 20;
    //b = 100 + b2; // 리터럴과 변수의 연산은 변수로 취급    
    
    s = -32768;
    s = 32767;
    //s = -32769;
    //s = 332768;
    
    i = -21_0000_0000; //약 21억
    i = 21_0000_0000;
    //i = -22_0000_0000;
    //i = 22_0000_0000;
    
    l = -922_0000_0000_0000_0000L;
    l = 922_0000_0000_0000_0000l;
    //l = -930_0000_0000_0000_0000L;
    //l = 930_0000_0000_0000_0000l;
    
    b = 100;
    s = 100;
    i = 100;
    
    //b = 100l;
    //s = 100l;
    //i = 100l;
    //8바이트 리터럴은 값을 넣을 수 없다
    
    byte b3;
    b3 = b;
    //b3 = s;
    //b3 = i;
    //b3 = l;
    
    short s2;
    s2 = b;
    s2 = s;
    //s2 = i;
    //s2 = l;
    
    int i2;
    i2 = b;
    i2 = s;
    i2 = i;
    //i2 = l;
    
    long l2;
    l2 = b;
    l2 = s;
    l2 = i;
    l2 = l;
    
    s = -32768;
    s = 32767;
    char c2; //유니코드 값을 저장해야 하기 때문에 short와 같은 2바이트라도 양수만 저장한다
    //c2 = -32768; // 음수를 저장할 수 없다.
    c2 = 0;
    c2 = 65535;
    //c2 = 65536;
    
    //c2 = s;
    //s = c2;
    
    f = 999.9999f;
    f = 9.999999f;
    f = 999999.9f;
    
    //부동소수점은 7자리까지의 숫자만 유효하다.
    //그 이상의 자릿수인 경우 값을 버린다.
    //또는 반올림 한다.
    //주의!
    //유효 자리수를 넘어간다고 오류가 발생하지는 않는다.
    f = 999.99993f;
    System.out.println(f);
    
    float f1 = 1.234567f;
    float f2 = 92345.22f;
    float f3 = f1 + f2; // float float = float = 12345.45..... 
    System.out.println(f1);
    System.out.println(f2);
    System.out.println(f3); // 92346.45 자릿수가 잘려서 나옴
    
    //두 부동 소수점을 연산한 결과가 4자리를 넘어갈 것 같으면 처음부터 double을 사용하라.
    double d1 = 1.234567f;
    double d2 = 92345.22f;
    double d3 = d1 + d2; // 123456.454567 
    double dx = f1 + f2; // dx = 12345.45xx
    System.out.println("==>");
    
    System.out.println(d1);
    System.out.println(d2);
    System.out.println(d3);
    System.out.println(dx);
    
    d = 79999999.99999997; // 16자리까지 유효
    System.out.println(d); // 16자리는 90%만 그렇고 안전한 것은 15자리
    
    f = 234.9999f;
    //f = 2345678912.123456; <그냥 적으면 8바이트를 4바이트에 넣으려는 것이라서 안된다.
    f = 2345678912.123456f; //f를 적으면 8바이트 값을 4바이트로 만든다.
                           //4바이트를 넘어가는 값은 자른다.
                           //따라서 f에 들어가는 값은 이미 잘린 값이다
                           //2345678912.12345f는 표현하는 순간부터 이미 임시 메모리에 잘못 저장됨
                           //이미 잘못 저장된 값이 f로 넘어간다.
    System.out.println(f);
    
    d = 234.5678;
    System.out.println(d);
    
    f = 234.5678f;
    System.out.println(f);
    
    d = 234.5678f;
    System.out.println(d);
    
    d = f;
    System.out.println(d);
    
    
    //부동 소수점은 정수보다 더 많은 연산을 해야한다.
    //그러므로 더 많은 클럭을 필요로 한다.
    //->더 많은 열이 발생한다.
    //특히 3디 그래픽에서 부동소수점을 많이 다룬다.
    //고로 그래픽 카드는 부동 소수점 연산에 특화되어 있다.
    //GPU는 열이 많이 발생하기 때문에 팬이 달려있는 경우가 많다.
    
    //부동 소수점 -> 연산을 하면 그냥 처음부터 더블 써라.
    //            -> 몸무게 같은 단순값을 저장하는 것은 플롯을 써도 된다.
    
    
    //i = 21_0000_0000;
    //i = 22_0000_0000L;
    
    /*
     * byte b;
     * short s;
     * int i;
     * long l;
     * float f;
     * double d;
     * char c;
     * boolean bool;
     * String str;
     * Date date;
     * 
     * byte b;
     * b = -128;
     * 
     * 
     * 
     * 
     * 
     */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  }
}
